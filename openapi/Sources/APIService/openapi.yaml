openapi: "3.1.0"
info:
  title: Sample API using OpenAPI
  description: API server built on [Hummingbird](https://hummingbird.codes/), [OracleNIO](https://github.com/lovetodream/oracle-nio) and [Swift OpenAPI Generator](https://github.com/apple/swift-openapi-generator).
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: This is the server.

paths:
  # Health
  # curl -i http://localhost:8080/health
  #
  /health:
    get:
      summary: Server health status
      description: Responses with 200 OK
      operationId: healthCheck
      responses:
        "200":
          description: Server health status

  # Greetings
  # curl http://localhost:8080
  #
  /:
    get:
      summary: Greetings
      description: Responses with a simple string using emoji. Hello, World! üåç
      operationId: hello
      responses:
        "200":
          description: Greetings
          content:
            text/plain:
              schema:
                type: string

  # List
  # curl http://localhost:8080/api/v1/parks
  #
  /api/v1/parks:
    get:
      summary: List of all üå≥.
      description: Returns with all parks in the database
      operationId: listParks
      responses:
        "200":
          description: JSON array of parks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Park"

    # Create
    # curl -X "POST" "http://localhost:8080/api/v1/parks" \
    #      -H 'Content-Type: application/json' \
    #      -d $'{
    #    "name": "Stromovka",
    #    "coordinates": {
    #      "longitude": 14.413999,
    #      "latitude": 50.105849
    #    }
    #  }'
    #
    post:
      summary: Create a park
      description: Saves park to the database
      operationId: createPark
      requestBody:
        description: JSON array of the park details supposed to be saved
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Park"
      responses:
        "201":
          description: Park created successfully
        "400":
          description: Bad request/invalid input
        "500":
          description: Internal server error

  # Show
  # curl "http://localhost:8080/api/v1/parks/2408B278-1518-DB79-E063-485D000A4B80" \
  #   -H 'Content-Type: application/json'
  #
  /api/v1/parks/{id}:
    get:
      summary: Show park with id
      description: Returns with park with specified id
      operationId: getParkById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: JSON array of the park details with specified id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Park"
        "404":
          description: Park not found
        "500":
          description: Internal server error

    # Update
    # curl -X "PUT" "http://localhost:8080/api/v1/parks/2408B278-1518-DB79-E063-485D000A4B80" \
    #      -H 'Content-Type: application/json' \
    #      -d $'{
    #    "name": "Stromovka",
    #    "coordinates": {
    #      "longitude": 14.413999,
    #      "latitude": 50.105849
    #    }
    #  }'
    #
    put:
      summary: Update
      description: Updates park with specified id
      operationId: updatePark
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: JSON array of the park object that needs to be updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Park"
      responses:
        "200":
          description: Park updated successfully
        "400":
          description: Bad request/invalid input
        "404":
          description: Park not found
        "500":
          description: Internal server error

    # Delete
    # curl -X "DELETE" "http://localhost:8080/api/v1/parks/2412D31E-B8F0-57E3-E063-485D000A41DC" \
    #   -H 'Content-Type: application/json'
    #
    delete:
      summary: Delete
      description: Deletes park with specified id
      operationId: deletePark
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Park deleted successfully
        "404":
          description: Park not found
        "500":
          description: Internal server error

components:
  schemas:
    Park:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        coordinates:
          type: object
          properties:
            latitude:
              type: number
            longitude:
              type: number
